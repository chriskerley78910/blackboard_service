'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const stream = require("stream");
const assert = require("assert");
exports.r2gSmokeTest = function () {
    return true;
};
class JSONParser extends stream.Transform {
    constructor(opts) {
        super({ objectMode: true });
        this.lastLineData = '';
        this.debug = false;
        opts = opts || {};
        if ('debug' in opts) {
            assert.strictEqual(typeof opts.debug, 'boolean', '"debug" option should be a boolean value.');
            this.debug = opts.debug;
        }
    }
    _transform(chunk, encoding, cb) {
        let data = String(chunk);
        if (this.lastLineData) {
            data = this.lastLineData + data;
        }
        const lines = data.split('\n');
        this.lastLineData = lines.pop();
        for (let l of lines) {
            try {
                l && this.push(JSON.parse(l));
            }
            catch (err) {
                if (this.debug) {
                    console.error('json-parser:', 'error parsing line:', l);
                    console.error('json-parser:', err.message);
                }
            }
        }
        cb();
    }
    _flush(cb) {
        if (this.lastLineData) {
            try {
                this.push(JSON.parse(this.lastLineData));
            }
            catch (err) {
            }
        }
        this.lastLineData = '';
        cb();
    }
}
exports.JSONParser = JSONParser;
exports.default = JSONParser;
