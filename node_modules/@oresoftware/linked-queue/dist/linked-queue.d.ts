export declare const r2gSmokeTest: () => boolean;
export interface LinkedQueueValue {
    after: LinkedQueueValue;
    before: LinkedQueueValue;
    value: any;
    key: any;
}
export declare type IteratorFunction = (val: LinkedQueueValue, index: number) => void;
export declare class LinkedQueue {
    private lookup;
    private head;
    private tail;
    length: number;
    constructor();
    getLength(): number;
    getSize(): number;
    getRandomKey(): any;
    getRandomItem(): any;
    remove(k: any): LinkedQueueValue;
    contains(k: any): boolean;
    get(k: any): LinkedQueueValue;
    peek(): LinkedQueueValue;
    getOrderedList(): Array<LinkedQueueValue>;
    static getKeyValue(v: LinkedQueueValue): {
        key: any;
        value: any;
    };
    forEach(fn: IteratorFunction, ctx?: any): this;
    map(fn: IteratorFunction, ctx?: any): any[];
    filter(fn: IteratorFunction, ctx?: any): any[];
    insertInFrontOf(): void;
    insertBehind(): void;
    insertAtIndex(): void;
    first(): LinkedQueueValue;
    last(): LinkedQueueValue;
    getReverseOrderedList(): Array<LinkedQueueValue>;
    removeAll(): void;
    clear(): any;
    unshift(k: any, obj?: any): void;
    addToFront(k: any, obj?: any): void;
    enq(...args: Array<any>): void[];
    deq(n: number): any[];
    dequeue(): LinkedQueueValue;
    enqueue(k: any, obj?: any): void;
    push(k: any, obj?: any): void;
    add(k: any, obj?: any): void;
    shift(): LinkedQueueValue;
    pop(): LinkedQueueValue;
    removeLast(): LinkedQueueValue;
}
