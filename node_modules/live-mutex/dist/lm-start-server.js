'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const broker_1 = require("./broker");
const chalk_1 = require("chalk");
const util = require("util");
let host = process.argv[3] || process.env.live_mutex_host || '0.0.0.0';
let port = parseInt(process.argv[2] || process.env.live_mutex_port || '6970');
const index = process.argv.indexOf('--json');
let v = { port, host };
if (index > 0) {
    try {
        v = JSON.parse(process.argv[index + 1]);
    }
    catch (err) {
        broker_1.log.error(chalk_1.default.magenta(`Could not parse your --json argument, try --json '{"port":3091}'.`));
        throw chalk_1.default.magentaBright(err.message);
    }
    host = v.host = (v.host || host);
    port = v.port = (v.port || port);
}
if (!Number.isInteger(port)) {
    broker_1.log.error(chalk_1.default.magenta('Live-mutex: port could not be parsed to integer from command line input.'));
    broker_1.log.error('Usage: lm_acquire_lock <key> <?port>');
    process.exit(1);
}
process.once('warning', function (e) {
    broker_1.log.error('process warning:', chalk_1.default.magenta(util.inspect(e)));
});
process.once('unhandledRejection', function (e) {
    broker_1.log.error('unhandled-rejection:', chalk_1.default.magenta(util.inspect(e)));
});
process.once('uncaughtException', function (e) {
    broker_1.log.error('uncaught-exception:', chalk_1.default.magenta(util.inspect(e)));
});
const b = new broker_1.Broker(v);
process.once('exit', function () {
    b.close(null);
});
b.emitter.on('warning', function () {
    broker_1.log.warn(...arguments);
});
b.ensure().then(function (b) {
    broker_1.log.info(chalk_1.default.bold('Started server on port:'), chalk_1.default.cyan.bold(String(b.getPort())));
})
    .catch(function (err) {
    broker_1.log.error('caught:', err && err.message || err);
    process.exit(1);
});
