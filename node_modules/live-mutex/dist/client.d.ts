/// <reference types="node" />
import * as net from 'net';
export declare const log: {
    info: any;
    warn: any;
    error: any;
    debug: (...args: any[]) => void;
};
import Timer = NodeJS.Timer;
import { EventEmitter } from 'events';
import { LMXClientLockException, LMXClientUnlockException } from "./exceptions";
export interface ValidConstructorOpts {
    [key: string]: string;
}
export declare const validConstructorOptions: ValidConstructorOpts;
export declare const validLockOptions: {
    force: string;
    maxRetries: string;
    maxRetry: string;
    ttl: string;
    lockRequestTimeout: string;
    keepLocksAfterDeath: string;
    keepLocksOnExit: string;
};
export declare const validUnlockOptions: {
    force: string;
    unlockRequestTimeout: string;
    keepLocksAfterDeath: string;
};
export interface ClientOpts {
    key: string;
    listener: Function;
    host: string;
    port: number;
    unlockRequestTimeout: number;
    lockRequestTimeout: number;
    lockRetryMax: number;
    retryMax: number;
    maxRetries: number;
    ttl: number;
    keepLocksAfterDeath: boolean;
    keepLocksOnExit: boolean;
    noDelay: boolean;
    udsPath: string;
}
export declare type EndReadCallback = (err?: any, val?: any) => void;
export interface IUuidTimeoutBool {
    [key: string]: boolean;
}
export declare type ErrFirstDataCallback = (err: any, val?: any) => void;
export interface IClientResolution {
    [key: string]: ErrFirstDataCallback;
}
export interface IBookkeepingHash {
    [key: string]: IBookkeeping;
}
export interface IBookkeeping {
    rawLockCount: number;
    rawUnlockCount: number;
    lockCount: number;
    unlockCount: number;
}
export declare type LMClientCallBack = (err: any, c?: Client) => void;
export declare type Ensure = (cb?: LMClientCallBack) => Promise<Client>;
export interface UuidBooleanHash {
    [key: string]: boolean;
}
export interface LMXClientLockOpts {
}
export interface LMXClientUnlockOpts {
}
export interface LMLockSuccessData {
    (fn: EVCallback): void;
    acquired: true;
    key: string;
    unlock: LMLockSuccessData;
    lockUuid: string;
    readersCount: number;
    id: string;
}
export interface LMUnlockSuccessData {
    unlocked: true;
    key: string;
    id: string;
}
export declare type EVCallback = (err?: any, val?: any) => void;
export interface LMClientLockCallBack {
    (err: LMXClientLockException, v?: LMLockSuccessData): void;
}
export interface LMClientUnlockCallBack {
    (err: LMXClientUnlockException, v?: LMUnlockSuccessData): void;
}
export declare class Client {
    port: number;
    host: string;
    listeners: Object;
    opts: Partial<ClientOpts>;
    ttl: number;
    unlockRequestTimeout: number;
    lockRequestTimeout: number;
    lockRetryMax: number;
    ws: net.Socket;
    timeouts: IUuidTimeoutBool;
    resolutions: IClientResolution;
    bookkeeping: IBookkeepingHash;
    ensure: Ensure;
    connect: Ensure;
    giveups: UuidBooleanHash;
    timers: {
        [key: string]: Timer;
    };
    write: (data: any, cb?: Function) => void;
    isOpen: boolean;
    close: Function;
    keepLocksAfterDeath: boolean;
    keepLocksOnExit: boolean;
    emitter: EventEmitter;
    noDelay: boolean;
    socketFile: string;
    readerCounts: {
        [key: string]: number;
    };
    writeKeys: {
        [key: string]: true;
    };
    constructor(o?: Partial<ClientOpts>, cb?: LMClientCallBack);
    static create(opts?: Partial<ClientOpts>): Client;
    requestLockInfo(key: string, opts?: any, cb?: Function): void;
    lockp(key: string, opts?: Partial<LMXClientLockOpts>): Promise<LMLockSuccessData>;
    unlockp(key: string, opts?: Partial<LMXClientUnlockOpts>): Promise<LMUnlockSuccessData>;
    acquire(key: string, opts?: Partial<LMXClientLockOpts>): any;
    release(key: string, opts?: Partial<LMXClientUnlockOpts>): any;
    acquireLock(key: string, opts?: Partial<LMXClientLockOpts>): any;
    releaseLock(key: string, opts?: Partial<LMXClientUnlockOpts>): any;
    run(fn: LMLockSuccessData): Promise<{}>;
    runUnlock(fn: LMLockSuccessData): Promise<any>;
    execUnlock(fn: LMLockSuccessData): Promise<any>;
    protected cleanUp(uuid: string): void;
    protected fireUnlockCallbackWithError(cb: LMClientUnlockCallBack, err: LMXClientUnlockException): void;
    protected fireLockCallbackWithError(cb: LMClientLockCallBack, err: LMXClientLockException): void;
    ls(opts: any, cb?: ErrFirstDataCallback): void;
    parseLockOpts(key: string, opts: any, cb?: any): [string, any, LMClientLockCallBack];
    parseUnlockOpts(key: string, opts?: any, cb?: any): [string, any, LMClientUnlockCallBack];
    lock(key: string, cb: LMClientLockCallBack): void;
    lock(key: string, opts: any, cb: LMClientLockCallBack): void;
    on(): any;
    once(): any;
    private lockInternal;
    noop(): void;
    getPort(): number;
    getHost(): string;
    unlock(key: string, opts: any, cb?: LMClientUnlockCallBack): void;
}
export default Client;
export declare const LMXClient: typeof Client;
export declare const LvMtxClient: typeof Client;
